/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast==slow)
            break;
        } 
        // If there's no cycle, return null
       if (fast == null || fast.next == null) {
        return null;
    }
        slow = head;
        // Move both pointers at the same pace until they meet at the start of the cycle
        while( slow!=fast){
            slow = slow.next;
            fast = fast.next;
        }
        // Return the node where the cycle begins
        return slow;
    }
}
